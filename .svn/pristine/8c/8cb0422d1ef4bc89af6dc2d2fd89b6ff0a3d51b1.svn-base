<template>
  <div class="doughnut"></div>
</template>

<script>
import Vue from 'vue';
import 'amcharts/dist/amcharts/amcharts.js';
import 'amcharts/dist/amcharts/pie.js';

const COLOR_FIELD = 'color';

let color16 = function () {
  return "#" + (function (color) {
      return new Array(7 - color.length).join("0") + color;
    })((Math.random() * 0x1000000 << 0 ).toString(16))
};
let Doughnut = Vue.extend({
  name: 'taurus-amcharts-doughnut',
  ready: function () {
    let chartContainer = this.$el;
    let content = this.content;
    if (!this.colorField.length) {
      this.colorField = COLOR_FIELD;
      this.data = this.color16(this.data);
    }
    let labels = [{
      "x": "50%",
      "y": "40%",
      "color": "#757575",
      "size": 26,
      "align": "middle",
      "text": (content.name || content.name == 0) ? content.name : ''
    },{
      "x": "50%",
      "y": "52%",
      "color": "#757575",
      "size": 14,
      "align": "middle",
      "text": (content.desc || content.desc == 0) ? content.desc : ''
    },{
      "x": "50%",
      "y": "90%",
      "color": "#757575",
      "bold": true,
      "size": 16,
      "align": "middle",
      "text": (content.title || content.title == 0) ? content.title : ''
    }];
    let legend = {
      "position": "right",
      "markerType": "circle",
      "markerSize": 5,
      "markerLabelGap": 10,
      "maxColumns": 2,
      "autoMargins": false,
      "valueText": "[[percents]]%"
    };
    let balloon = {
      "adjustBorderColor": false,
      "color": "#FFF",
      "borderThickness": 0,
      "fillAlpha": 1,
      "cornerRadius": 2,
      "shadowAlpha": 0,
      "fadeOutDuration": 0,
      "animationDuration": 0
    };
    AmCharts.makeChart(chartContainer, {
      "type": "pie",
      "dataProvider": this.data,
      "marginBottom": 35,
      "allLabels": labels,
      "legend": !this.legend ? undefined : legend,
      "balloon": balloon,
      "labelsEnabled": this.labelsEnabled,   //是否显示label,默认不显示
      "titleField": this.titleField,    // 饼图的label用哪个源数据哪个字段来映射
      "valueField": this.valueField,    // 饼图的value用哪个源数据哪个字段来映射
      "colorField": this.colorField,
      "depth3D": this.show3d ? 10 : 1,  // 是否3d显示，对外只提供显示或者不显示，显示为10，否则为1
      "labelRadius": 5,                 // label距离slice的距离
      "radius": "40%",                  // pie 的半径，可用百分比或像素来控制
      "innerRadius": "85%",             // slice厚度所占半径百分比
      "labelFunction": this.labelRender ? this.labelFunction : undefined,   // 用于label的映射
      "labelText": "[[title]]",        // label 显示模式，默认为[[title]]: [[percents]]%
      "maxLabelWidth": 200,             // label的最大宽度，超出此宽度后换行
      "panEventsEnabled": true,          // 防止在pie在移动端占据整个屏幕导致无法滑动
      "pullOutOnlyOne": true,             // 单选（只有一个slice可以被选中）
      "pullOutEffect": "easeOutSine",
      "pullOutDuration": 0.3,
      "balloonText": "[[title]] [[percents]]%",
      "fillAlpha": 1
    });
  },
  props: {
    data: {
      type: Array
    },
    titleField: {
      type: String
    },
    valueField: {
      type: String
    },
    colorField: {
      default: '',
      type: String
    },
    content: {
      default: {},
      type: Object
    },
    show3d: {
      default: false,
      type: Boolean,
      coerce: function (show3d) {
        return show3d === 'true' ? true : false;
      }
    },
    labelsEnabled: {
      default: false,
      type: Boolean,
      coerce: function (isEnable) {
        return isEnable === 'true' ? true : false;
      }
    },
    labelRender: {
      default: '',
      type: String
    },
    legend: {
      default: false,
      type: Boolean,
      coerce: function (legend) {
        return legend === 'true' ? true : false;
      }
    }
  },
  methods: {
    /**
     * 用于将label重新映射为另一个字符串形式的新label
     * @param pie 图像对象
     * @param label 原始label
     * @returns {string}
     */
    labelFunction: function (pie, label) {
      if (this.labelRender && typeof this.$parent[this.labelRender] === 'function') {
        return this.$parent[this.labelRender](label, pie);
      } else {
        return label;
      }
    },
    /**
     * 生成十六进制的随机颜色然后加入原数组
     * @param data
     * @returns {Array}
     */
    color16: function (data) {
      data.map(function (item) {
        item[COLOR_FIELD] = color16();
      });
      return data;
    }
  }
});
export default Doughnut;
</script>

<style>
  .doughnut {
    width: 100%;
    height: 100%;
    font-size: 14px;
    overflow: hidden;
    display: inline-block;
  }
</style>
